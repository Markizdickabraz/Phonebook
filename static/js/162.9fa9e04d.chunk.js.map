{"version":3,"file":"static/js/162.9fa9e04d.chunk.js","mappings":"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","sources":["components/form/FormStyled.js","redux/contacts/selectors.js","components/form/form.js","components/contactList/contactListStyled.js","components/contactList/contactList.js","components/filter/filter.js","pages/contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormStyled= styled.form`\ndisplay:flex;\nflex-direction:column;\ngap:10px;\npadding:15px;\nborder: 1px solid black;\nwidth: 450px;\n`\n\nexport const FormBtn = styled.button`\nwidth:130px;\npadding: 10px 15px 10px 15px;\nborder-radius:6px;\ntransition: all .2s ease-in-out;\nbackground-color: white;\ncursor: pointer;\n\n&:hover,\n&:focus{\n    background-color: lightblue;\n    transform: scale(1.02);\n}\n`\nexport const LabelStyled = styled.label`\ndisplay:flex;\ngap: 5px;\nflex-direction:column;\n`\nexport const InputStyled = styled.input`\npadding-left:10px;\nheight:40px;\nborder-radius:6px;\nmax-width:420px; \ntransition: all .2s ease-in-out;\n\n&:focus{\n    transform: scale(1.02);\n    box-shadow: 5px 5px 5px grey;\n}\n`\n","export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const filtredContacts = state => {\n    const contacts = getContacts(state)\n    const filter = getFilter(state)\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n}","import { FormBtn, FormStyled, InputStyled, LabelStyled } from \"./FormStyled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContacts} from \"redux/contacts/selectors\";\nimport { addContacts } from \"redux/contacts/operations\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { useState } from \"react\";\n\n\nexport default function ContactForm() {\n    \n        const dispatch = useDispatch();\n        const items = useSelector(getContacts);\n\n    let data = [];\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChacge = e => {\n        const { name, value } = e.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default: return;\n           } \n    }\n    \n    data = { name: { name }.name, number: { number }.number, id: nanoid() }\n            \n            const formSubmitHandler = (event) => {\n            event.preventDefault();\n            const filterdContacts = items.map(contact => contact.name);\n              const someName = filterdContacts.some(name => name === data.name);\n                if (someName) {\n                    reset();\n                    return alert(`${data.name}, is already in contacts`);\n                } \n                dispatch(addContacts(data));\n                 reset()\n            }\n            \n    const reset = () => {\n        setName('');\n        setNumber('');\n}\n    \nreturn (\n  <FormStyled onSubmit={formSubmitHandler}>\n          <LabelStyled>Name\n             <InputStyled\n              type=\"text\"\n              name=\"name\"\n              value={name}\n                onChange={handleChacge}\n                autoComplete = 'off'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          />\n          </LabelStyled>\n\n          <LabelStyled>number\n            <InputStyled\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                onChange={handleChacge}\n                autoComplete = 'off'\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n/>\n          </LabelStyled>\n    <FormBtn type='submit'>Add contact</FormBtn>\n        </FormStyled>\n)\n}\n","import styled from \"styled-components\";\n\nexport const ConstactListStyled = styled.ul`\nlist-style: none;\npadding-left:15px;\n`\n\nexport const ListItemStyled = styled.li`\npadding-top:10px;\n`\n\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { filtredContacts } from \"redux/contacts/selectors\";\nimport { ConstactListStyled, ListItemStyled } from './contactListStyled';\nimport { deleteContatcs } from \"redux/contacts/operations\";\nimport { Button } from \"@mui/material\";\n\nexport default function ContactList() {\n\n  const dispatch = useDispatch();\n\n  const filtredComponents = useSelector(filtredContacts);\n\n  const deleteClick = (id) => {\n    // console.log(id)\n    return dispatch(deleteContatcs(id))\n  };\n      \n        return (\n            <>\n                    <ConstactListStyled\n                    >\n                {filtredComponents.map(item =>\n                (\n                         <ListItemStyled style={{display:'flex', gap:'12px', alignItems:'center'}} key={item.name} > <span> {item.name} : {item.number}</span> <Button variant=\"contained\" type=\"button\" onClick = {()=>{deleteClick(item.id)}}>Delete</Button></ListItemStyled>\n                         )\n                         )}\n                         </ConstactListStyled>\n            </>\n        )\n    }","import React from \"react\"\nimport PropTypes from 'prop-types';\nimport { InputStyled, LabelStyled } from '../form/FormStyled'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilter } from \"redux/contacts/selectors\";\nimport { filter } from \"redux/contacts/filterSlice\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  \n  const filterItems = useSelector(getFilter)\n  const chengeFilter = e => {\n    dispatch(filter(e.currentTarget.value))\n  }\n\n  return (  \n                <LabelStyled>\n          Find contacts by name\n    <InputStyled\n            type='text'\n            value={filterItems}\n            onChange = {chengeFilter}\n          />\n        </LabelStyled>    \n  )\n}\n\n\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n\n}\n","import ContactForm from \"../components/form/form\";\nimport ContactList from \"../components/contactList/contactList\";\nimport Filter from \"../components/filter/filter\";\nimport { useDispatch} from \"react-redux\";\n// import { filtredContacts} from \"redux/contacts/selectors\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { useEffect } from \"react\";\nimport { Helmet,  HelmetProvider } from \"react-helmet-async\";\n\n\nexport default function Contacts() {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // const filtredComponents = useSelector(filtredContacts);\n  \n    return (\n      <HelmetProvider>\n        <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n         <ContactList />\n        </HelmetProvider>\n    )\n}"],"names":["FormStyled","styled","FormBtn","LabelStyled","InputStyled","getContacts","state","contacts","items","getFilter","filter","filtredContacts","contact","name","toLowerCase","includes","ContactForm","data","dispatch","useDispatch","useSelector","useState","setName","number","setNumber","handleChacge","e","currentTarget","value","id","nanoid","reset","onSubmit","event","preventDefault","someName","map","some","alert","addContacts","type","onChange","autoComplete","pattern","title","required","ConstactListStyled","ListItemStyled","ContactList","filtredComponents","item","style","display","gap","alignItems","Button","variant","onClick","deleteContatcs","Filter","filterItems","Contacts","useEffect","fetchContacts"],"sourceRoot":""}